<http://data.europa.eu/m8g/> sh:prefix "cccev" .
<https://example.org/ns/westerlo> sh:prefix "westerlo" .

#
# Constraint groups (can be used to generate form, e.g. based on order)
# The specific constraints link to their respective group
#
westerlo-constraints:criterionMasterDataWasteContainerInfoConstraintsGroup
    a sh:PropertyGroup ;
	sh: order 0 ;
	rdfs:label "Jouw gegevens"@nl ;
	rdfs:label "Your information"@en .

westerlo-constraints:criterionGreyWasteContainerInfoConstraintsGroup
    a sh:PropertyGroup ;
	sh:order 1 ;
	rdfs:label "Volgens de toekenningsregels ontvang ik de volgende grijze restafval container(s) met chip:"@nl ;
	rdfs:label "According to the allocation rules, I receive the following gray waste container(s) with chip:"@en .
	
westerlo-constraints:criterionGreenWasteContainerInfoConstraintsGroup
    a sh:PropertyGroup ;
	sh:order 2 ;
	rdfs:label "Volgens de toekenningsregels ontvang ik te volgende groene GFT-container(s) met chip:"@nl ;
	rdfs:label "According to the allocation rules, I receive the following green waste container(s) with chip"@en .
	
westerlo-constraints:criterionYellowWasteContainerInfoConstraintsGroup
    a sh:PropertyGroup ;
	sh:order 3 ;
	rdfs:label "Volgens de toekenningsregels ontvang ik de volgende gele papier container(s) met chip:"@nl ;
	rdfs:label "According to the allocation rules, I receive the following yellow paper waste container(s) with chip:"@en .


#
# Reusable constraint fragments
#
westerlo-constraints:criterionValueMinMax1
    a sh:NodeShape ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minInclusive 1 ;
		sh:maxInclusive 1 ;
	] .

# test reponse
#@prefix westerlo: <https://example.org/ns/westerlo> .
#@prefix westerlo-constraints: <https://example.org/ns/westerlo-constraints> .
#@prefix cccev: <http://data.europa.eu/m8g/> .
#@prefix sh: <http://www.w3.org/ns/shacl#> .
#
#westerlo:myResponse a cccev:RequirementResponse ;
#    cccev:validates westerlo-constraints:criterionValueMinMax1 ;
#    cccev:value 3 ;
#    sh:node westerlo-constraints:criterionValueMinMax1 .
	
#
# Constraints regarding master data
#


#
# Constraints regarding the grey waste container
#

# possible values of 40 liter grey containers
# what is restricted: RequirementResponses validating an CriteironRequirement
# We target a specific subclass of cccev:validates subjects, thus we need custom targets as defined in SHACL Advanced Features
westerlo-constraints:criterionGreyWasteContainer40LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:greyWasteContainer40Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minInclusive 1 ;
		sh:maxInclusive 3 ;
	] .
	
# possible values of 120 liter grey containers
westerlo-constraints:criterionGreyWasteContainer120LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:greyWasteContainer120Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minInclusive 1 ;
		sh:maxInclusive 1 ;
	] .

# possible values of 240 grey liter containers
westerlo-constraints:criterionGreyWasteContainer240LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:greyWasteContainer240Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minclusive 1 ;
		sh:maxInclusive 1 ;
	] .
		

#
# Constraints regarding the green waste container
#
westerlo-constraints:criterionGreenWasteContainer40LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:greenWasteContainer40Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minInclusive 1 ;
		sh:maxInclusive 3 ;
	] .
	
# possible values of 120 liter grey containers
westerlo-constraints:criterionGreenWasteContainer120LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:greenWasteContainer120Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minInclusive 1 ;
		sh:maxInclusive 2 ;
	] .

#
# Constraints regarding the yellow waste container
#
westerlo-constraints:criterionGreyWasteContainer40LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:yellowWasteContainer40Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minInclusive 1 ;
		sh:maxInclusive 3 ;
	] .
	
# possible values of 240 liter yellow containers
westerlo-constraints:criterionYellowWasteContainer240LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:yellowWasteContainer240Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minInclusive 1 ;
		sh:maxInclusive 1 ;
	] .

# possible values of 1100 yellow liter containers
westerlo-constraints:criterionYellowWasteContainer1100LitersConstraints 
    a sh:NodeShape ;
	sh:target [
	    a sh:SPARQLTarget ;
		sh:select """
		    SELECT ?this
			WHERE {
			    ?this cccev:validates westerlo:yellowWasteContainer1100Amount .
			}
		""" ;
	] ;
	sh:property [
	    a sh:PropertyShape ;
	    sh:path cccev:value ;
		sh:minclusive 1 ;
		sh:maxInclusive 1 ;
	] .